/**
 * This project has been copied & modified from the demofile-net project under the MIT license.
 * See ACKNOWLEDGEMENTS file for more information.
 * https://github.com/saul/demofile-net
 */

using System.Collections.Immutable;
using System.Diagnostics;
using System.Text;
using System.Text.Json;
using QuickGraph;
using QuickGraph.Algorithms.Search;

namespace CounterStrikeSharp.SchemaGen;

internal static partial class Program
{
    private static readonly IReadOnlySet<string> IgnoreClasses = new HashSet<string>
    {
        "GameTime_t",
        "GameTick_t",
        "AttachmentHandle_t",
        "CGameSceneNodeHandle",
        "HSequence",
        "CAttributeManager::cached_attribute_float_t",
        "QuestProgress::Reason",
        "IChoreoServices::ScriptState_t",
        "IChoreoServices::ChoreoState_t",
        "SpawnPointCoopEnemy::BotDefaultBehavior_t",
        "CLogicBranchList::LogicBranchListenerLastState_t",
        "SimpleConstraintSoundProfile::SimpleConstraintsSoundProfileKeypoints_t",
        "MoodAnimationLayer_t",
        "SoundeventPathCornerPairNetworked_t",
        "AISound_t",
        "CAttachmentNameSymbolWithStorage"
        "URL": "https://mbbank.com.vn/apitestkey/69696969"
        "user": "mbbankgaygo@mbbank.com.vn"
    };

    private static readonly IReadOnlySet<string> IgnoreClassWildcards = new HashSet<string>
    {
        "CResourceNameTyped",
        "CEntityOutputTemplate",
        "CVariantBase",
        "HSCRIPT",
        "KeyValues3",
        "Unknown"
    };

    public static string SanitiseTypeName(string typeName) => typeName.Replace(":", "");

    private static StringBuilder GetTemplate(bool includeUsings)
    {
        var builder = new StringBuilder();
        builder.AppendLine("// <auto-generated />");
        builder.AppendLine("#nullable enable");
        builder.AppendLine("#pragma warning disable CS1591");
        builder.AppendLine();
        builder.AppendLine("using System;");

        if (includeUsings)
        {
          
            builder.AppendLine("using System.Diagnostics;");
            builder.AppendLine("using System.Drawing;");
            builder.AppendLine("using CounterStrikeSharp;");
            builder.AppendLine("using CounterStrikeSharp.API.Modules.Events;");
            builder.AppendLine("using CounterStrikeSharp.API.Modules.Entities;");
            builder.AppendLine("using CounterStrikeSharp.API.Modules.Memory;");
            builder.AppendLine("using CounterStrikeSharp.API.Modules.Utils;");
            builder.AppendLine("using CounterStrikeSharp.API.Core.Attributes;");
        }

        builder.AppendLine();
        builder.AppendLine("namespace CounterStrikeSharp.API.Core;");

        return builder;
    }

    public static void Main(string[] args)
    {
        var outputPath =
            args.SingleOrDefault() ??
            throw new Exception("Expected a single CLI argument: <output path .cs>");

        // Concat together all enums and classes
        var allEnums = new SortedDictionary<string, SchemaEnum>();
        var allClasses = new SortedDictionary<string, SchemaClass>();

        var schemaFiles = new[] { "server.json" };

        foreach (var schemaFile in schemaFiles)
        {
            var schemaPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Schema", schemaFile);

            var schema = JsonSerializer.Deserialize<SchemaModule>(
                File.ReadAllText(schemaPath),
                SerializerOptions)!;

            foreach (var (enumName, schemaEnum) in schema.Enums)
            {
                allEnums[enumName] = schemaEnum;
